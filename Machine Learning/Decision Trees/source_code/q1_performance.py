from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np

data = {
    'gini_train': [
        [0.86416, 0.86416, 0.86416, 0.86416, 0.86416, 0.86416, 0.86416, 0.86416, 0.86416, 0.86416, 0.86416],
        [0.88651, 0.88651, 0.88651, 0.88651, 0.88651, 0.88651, 0.88651, 0.88651, 0.88651, 0.88651, 0.88651],
        [0.89366, 0.89366, 0.89366, 0.89366, 0.89366, 0.89366, 0.89366, 0.89366, 0.89366, 0.89366, 0.89366],
        [0.90705, 0.90705, 0.90705, 0.90705, 0.90437, 0.90437, 0.89902, 0.89902, 0.89902, 0.89902, 0.89902],
        [0.92046, 0.92046, 0.91957, 0.91510, 0.90795, 0.90795, 0.89902, 0.89902, 0.89902, 0.89902, 0.89902],
        [0.94191, 0.94012, 0.93655, 0.92314, 0.91063, 0.91063, 0.90170, 0.90080, 0.90080, 0.90080, 0.90080],
        [0.96068, 0.95710, 0.94638, 0.92851, 0.91600, 0.91600, 0.90617, 0.90080, 0.90080, 0.90080, 0.90080],
        [0.96872, 0.96246, 0.95174, 0.92940, 0.91689, 0.91689, 0.90706, 0.90170, 0.90170, 0.90170, 0.90170],
        [0.98570, 0.97319, 0.95800, 0.93476, 0.93476, 0.91778, 0.90795, 0.90259, 0.90259, 0.90170, 0.90170],
        [0.99374, 0.97498, 0.95800, 0.93476, 0.92225, 0.91778, 0.90795, 0.90259, 0.90259, 0.90170, 0.90170],
    ],

    'gini_test': [
        [0.86458, 0.86458, 0.86458, 0.86458, 0.86458, 0.86458, 0.86458, 0.86458, 0.86458, 0.86458, 0.86458],
        [0.88750, 0.88750, 0.88750, 0.88750, 0.88750, 0.88750, 0.88750, 0.88750, 0.88750, 0.88750, 0.88750],
        [0.87917, 0.87917, 0.87917, 0.87917, 0.87917, 0.87917, 0.87917, 0.87917, 0.87917, 0.87917, 0.87917],
        [0.88125, 0.88125, 0.88125, 0.88125, 0.87083, 0.87083, 0.85833, 0.85833, 0.85833, 0.85833, 0.85833],
        [0.88750, 0.88750, 0.88750, 0.89167, 0.87083, 0.87083, 0.85625, 0.85625, 0.85833, 0.85833, 0.85833],
        [0.88125, 0.87708, 0.87500, 0.88542, 0.86250, 0.86250, 0.84792, 0.84583, 0.84792, 0.84792, 0.84792],
        [0.87917, 0.87500, 0.87500, 0.88750, 0.86458, 0.86458, 0.85000, 0.84583, 0.84792, 0.84792, 0.84792],
        [0.88333, 0.87500, 0.87500, 0.88333, 0.86042, 0.86042, 0.84583, 0.84167, 0.84375, 0.84375, 0.84375],
        [0.88541, 0.87500, 0.87291, 0.88125, 0.88125, 0.85833, 0.84375, 0.83958, 0.84167, 0.84375, 0.84375],
        [0.88333, 0.87292, 0.87292, 0.88125, 0.85833, 0.85833, 0.84375, 0.83958, 0.84167, 0.84375, 0.84375],
    ],

    'entropy_train': [
        [0.86416, 0.86416, 0.86416, 0.86416, 0.86416, 0.86416, 0.86416, 0.86416, 0.86416, 0.86416, 0.86416],
        [0.86416, 0.86416, 0.86416, 0.86416, 0.86416, 0.86416, 0.86416, 0.86416, 0.86416, 0.86416, 0.86416],
        [0.88829, 0.88829, 0.88829, 0.88829, 0.88829, 0.88829, 0.88829, 0.88829, 0.88829, 0.88829, 0.88829],
        [0.89366, 0.89366, 0.89366, 0.89366, 0.89366, 0.89366, 0.89366, 0.89366, 0.89366, 0.89366, 0.89366],
        [0.90080, 0.89991, 0.89723, 0.89723, 0.89455, 0.89455, 0.89455, 0.89455, 0.89455, 0.89455, 0.89455],
        [0.92493, 0.92404, 0.92046, 0.91689, 0.90974, 0.90974, 0.90974, 0.90974, 0.90617, 0.90617, 0.90617],
        [0.94459, 0.94101, 0.93387, 0.92672, 0.91778, 0.91778, 0.91421, 0.91421, 0.91063, 0.91063, 0.91063],
        [0.97140, 0.96515, 0.94548, 0.93744, 0.92315, 0.92315, 0.91957, 0.91421, 0.91063, 0.91063, 0.91063],
        [0.98481, 0.97587, 0.95621, 0.94727, 0.94727, 0.92761, 0.91957, 0.91421, 0.91063, 0.91063, 0.91063],
        [0.99196, 0.98123, 0.95979, 0.94996, 0.92761, 0.92761, 0.91957, 0.91421, 0.91063, 0.91063, 0.91063],
    ],

    'entropy_test': [
        [0.86458, 0.86458, 0.86458, 0.86458, 0.86458, 0.86458, 0.86458, 0.86458, 0.86458, 0.86458, 0.86458],
        [0.86458, 0.86458, 0.86458, 0.86458, 0.86458, 0.86458, 0.86458, 0.86458, 0.86458, 0.86458, 0.86458],
        [0.87708, 0.87708, 0.87708, 0.87708, 0.87708, 0.87708, 0.87708, 0.87708, 0.87708, 0.87708, 0.87708],
        [0.86875, 0.86875, 0.86875, 0.86875, 0.86875, 0.86875, 0.86875, 0.86875, 0.86875, 0.86875, 0.86875],
        [0.88542, 0.88542, 0.88333, 0.88333, 0.87083, 0.87083, 0.87083, 0.87083, 0.87083, 0.87083, 0.87083],
        [0.85417, 0.85417, 0.85417, 0.85625, 0.85833, 0.85833, 0.85833, 0.85833, 0.85833, 0.85833, 0.85833],
        [0.87083, 0.86667, 0.86458, 0.86250, 0.86458, 0.86458, 0.87083, 0.87083, 0.87083, 0.87083, 0.87083],
        [0.87083, 0.86667, 0.86875, 0.86667, 0.87083, 0.87083, 0.87708, 0.87083, 0.87083, 0.87083, 0.87083],
        [0.87083, 0.86666, 0.87083, 0.87083, 0.87083, 0.87292, 0.87708, 0.87083, 0.87083, 0.87083, 0.87083],
        [0.87916, 0.87708, 0.88125, 0.87917, 0.87292, 0.87291, 0.87708, 0.87083, 0.87083, 0.87083, 0.87083],
    ]
}

minLeafSamples = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]
treeDepths = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

def format_data(data):

    mls = []
    dep = []
    acc = []

    for i, row in enumerate(data):
        for j, col in enumerate(row):
            mls.append(minLeafSamples[j])
            dep.append(treeDepths[i])
            acc.append(col)

    return mls, dep, acc

def plot(name):
    fig = plt.figure()
    ax = plt.axes(projection='3d')

    mls, dep, acc = format_data(data[name])

    ax.plot_trisurf(mls, dep, acc, cmap='viridis')

    ax.set_title(' '.join([i[0].upper() + i[1:] for i in name.split('_')]))
    ax.set_xlabel('Min Leaf Samples')
    ax.set_ylabel('Tree Depth')
    ax.set_zlabel('Accuracy')

    plt.show()


plot('gini_train')
plot('gini_test')
plot('entropy_train')
plot('entropy_test')
